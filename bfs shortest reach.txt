import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the bfs function below.
    static int[] bfs(int n, int m, int[][] edges, int s) {

        Map<Integer, Set<Integer>> adjList = new HashMap<>();

        for(int i=0; i<m; i++) {

            if( adjList.containsKey(edges[i][0]-1) ) {
                adjList.get(edges[i][0]-1).add(edges[i][1]-1);
            }

            else {
                 Set<Integer> adjVertex = new HashSet<>();
                 adjVertex.add(edges[i][1]-1);
                 adjList.put( edges[i][0]-1, adjVertex);
            }
            
        }

        boolean []visited = new boolean[n]; 
        int []distance = new int[n];
        Arrays.fill(distance, -1);


        Queue<Integer> queue = new LinkedList<>();
        queue.add(s-1);
        distance[s-1]=0;
        
        while( !queue.isEmpty() ) {

            int parentVertex = queue.poll();
            visited[parentVertex]=true;
            
            if( adjList.containsKey(parentVertex) ){

            Set<Integer> adjVertex;
            adjVertex = adjList.get(parentVertex);

            Iterator iterator = adjVertex.iterator();

            while(iterator.hasNext()) {
                
                int a = (Integer)iterator.next();

                if(visited[a]==false) {
                distance[a] = distance[parentVertex] + 6;
                queue.add(a);
                }

            }

            }
        }

        return distance;

    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int qItr = 0; qItr < q; qItr++) {
            String[] nm = scanner.nextLine().split(" ");

            int n = Integer.parseInt(nm[0]);

            int m = Integer.parseInt(nm[1]);

            int[][] edges = new int[m][2];

            for (int i = 0; i < m; i++) {
                String[] edgesRowItems = scanner.nextLine().split(" ");
                scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

                for (int j = 0; j < 2; j++) {
                    int edgesItem = Integer.parseInt(edgesRowItems[j]);
                    edges[i][j] = edgesItem;
                }
            }

            int s = scanner.nextInt();
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

            int[] result = bfs(n, m, edges, s);

            for (int i = 0; i < result.length; i++) {

                if( i != s-1){
                bufferedWriter.write(String.valueOf(result[i]));}

                if (i != result.length - 1 && i != s-1) {
                    bufferedWriter.write(" ");
                }
            }

            bufferedWriter.newLine();
        }

        bufferedWriter.close();

        scanner.close();
    }
}
